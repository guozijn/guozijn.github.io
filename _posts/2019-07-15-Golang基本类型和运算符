# 基本类型和运算符
## 布尔类型
```go
var b bool = true
```
### 非运算符 !

```go
!T -> false
!F -> true
```
### 和运算符 &&

```go
T && T -> true
T && F -> false
F && T -> false
F && F -> false
```
### 或运算符 ||
```go
T || T -> true
T || F -> true
F || T -> true
F || F -> false
```
## 数字类型
### 整数
- int8（-128 -> 127）
- int16（-32768 -> 32767）
- int32（-2,147,483,648 -> 2,147,483,647）
- int64（-9,223,372,036,854,775,808 -> 9,223,372,036,854,775,807）
### 无符号整数
- uint8（0 -> 255）
- uint16（0 -> 65,535）
- uint32（0 -> 4,294,967,295）
- uint64（0 -> 18,446,744,073,709,551,615）
### 浮点型（IEEE-754 标准）
- float32（+- 1e-45 -> +- 3.4 * 1e38）
- float64（+- 5 * 1e-324 -> 107 * 1e308）

数字类型后的数字单位为 bit，指在内存中占用的容量大小，如 int8 相当于在内存中占用 1 个字节。

int 型是计算最快的一种类型。

类型间可以显式转换。

示例：
```go
package main

import "fmt"

func main() {
	var n int16 = 34
	var m int32
	// compiler error: cannot use n (type int16) as type int32 in assignment
	//m = n
	m = int32(n)

	fmt.Printf("32 bit int is: %d\n", m)
	fmt.Printf("16 bit int is: %d\n", n)
}
```
## 格式化说明符
在格式化字符串里，%d 用于格式化整数（%x 和 %X 用于格式化 16 进制表示的数字），%g 用于格式化浮点型（%f 输出浮点数，%e 输出科学计数表示法），%0nd 用于规定输出长度为n的整数，其中开头的数字 0 是必须的。

<span>%n.mg</span> 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f，例如：使用格式化字符串 %5.2e 来输出 3.4 的结果为 3.40e+00。
## 位运算
位运算只能用于整数类型的变量，且需当它们拥有等长位模式时。
### 二元运算符
- 按位与 &
- 按位或 |
- 按位异或 ^

## 一元运算符
- 按位补足 ^
- 位左移 <<

用法：bitP << n。

bitP 的位向左移动 n 位，右侧空白部分使用 0 填充；如果 n 等于 2，则结果是 2 的相应倍数，即 2 的 n 次方。例如：

```go
1 << 10 // 等于 1 KB
1 << 20 // 等于 1 MB
1 << 30 // 等于 1 GB
```

- 位右移 >>

## 逻辑运算符

==、!=、<、<=、>、>=

它们之所以被称为逻辑运算符是因为它们的运算结果总是为布尔值 bool。例如：

```go
b3:= 10 > 5 // b3 is true
```
## 算术运算符

+、-、*、/、%

## 运算符与优先级

```go
优先级 	运算符
 7 		^ !
 6 		* / % << >> & &^
 5 		+ - | ^
 4 		== != < <= >= >
 3 		<-
 2 		&&
 1 		||
```
## 类型别名

当你在使用某个类型时，可以给它起个别名，用于简化名称或解决名称冲突。

```go
type NT int

var a, b NT = 3, 4
```
